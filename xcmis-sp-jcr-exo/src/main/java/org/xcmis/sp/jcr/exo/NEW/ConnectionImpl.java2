/*
 * Copyright (C) 2010 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.xcmis.sp.jcr.exo.NEW;

import org.exoplatform.services.jcr.core.ExtendedSession;
import org.xcmis.core.CmisAccessControlListType;
import org.xcmis.core.CmisAllowableActionsType;
import org.xcmis.core.CmisPropertiesType;
import org.xcmis.core.CmisProperty;
import org.xcmis.core.CmisPropertyBoolean;
import org.xcmis.core.CmisPropertyDateTime;
import org.xcmis.core.CmisPropertyDecimal;
import org.xcmis.core.CmisPropertyDefinitionType;
import org.xcmis.core.CmisPropertyHtml;
import org.xcmis.core.CmisPropertyId;
import org.xcmis.core.CmisPropertyInteger;
import org.xcmis.core.CmisPropertyString;
import org.xcmis.core.CmisPropertyUri;
import org.xcmis.core.CmisRenditionType;
import org.xcmis.core.CmisRepositoryInfoType;
import org.xcmis.core.CmisTypeDefinitionType;
import org.xcmis.core.EnumACLPropagation;
import org.xcmis.core.EnumBaseObjectTypeIds;
import org.xcmis.core.EnumIncludeRelationships;
import org.xcmis.core.EnumRelationshipDirection;
import org.xcmis.core.EnumUnfileObject;
import org.xcmis.core.EnumVersioningState;
import org.xcmis.messaging.CmisTypeContainer;
import org.xcmis.messaging.CmisTypeDefinitionListType;
import org.xcmis.sp.jcr.exo.JcrCMIS;
import org.xcmis.spi.CmisRuntimeException;
import org.xcmis.spi.Connection;
import org.xcmis.spi.ConstraintException;
import org.xcmis.spi.ContentAlreadyExistsException;
import org.xcmis.spi.FilterNotValidException;
import org.xcmis.spi.InvalidArgumentException;
import org.xcmis.spi.NameConstraintViolationException;
import org.xcmis.spi.NotSupportedException;
import org.xcmis.spi.ObjectNotFoundException;
import org.xcmis.spi.StorageException;
import org.xcmis.spi.StreamNotSupportedException;
import org.xcmis.spi.TypeNotFoundException;
import org.xcmis.spi.UpdateConflictException;
import org.xcmis.spi.VersioningException;
import org.xcmis.spi.data.ContentStream;
import org.xcmis.spi.data.ObjectData;
import org.xcmis.spi.impl.PropertyFilter;
import org.xcmis.spi.object.CmisObject;
import org.xcmis.spi.object.CmisObjectInFolderContainer;
import org.xcmis.spi.object.CmisObjectInFolderList;
import org.xcmis.spi.object.CmisObjectList;
import org.xcmis.spi.object.CmisObjectParents;
import org.xcmis.spi.utils.CmisUtils;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.List;

import javax.jcr.Item;
import javax.jcr.ItemNotFoundException;
import javax.jcr.Node;
import javax.jcr.Property;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.Value;

/**
 * @author <a href="mailto:andrey00x@gmail.com">Andrey Parfonov</a>
 * @version $Id: $
 */
public class ConnectionImpl implements Connection
{

   protected final Session session;

   public ConnectionImpl(Session session)
   {
      this.session = session;
   }

   public void addObjectToFolder(String objectId, String folderId, boolean allVersions) throws ObjectNotFoundException,
      InvalidArgumentException, ConstraintException, CmisRuntimeException
   {
      throw new NotSupportedException("Multifiling is not supported.");
   }

   @Override
   public void addType(CmisTypeDefinitionType type) throws StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void applyAcl(String objectId, CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl,
      EnumACLPropagation propagation) throws ObjectNotFoundException, ConstraintException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void applyPolicy(String policyId, String objectId) throws ConstraintException, ObjectNotFoundException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void cancelCheckout(String documentId) throws ConstraintException, UpdateConflictException,
      VersioningException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public CmisObject checkin(String documentId, boolean major, CmisPropertiesType properties, ContentStream content,
      String checkinComment, CmisAccessControlListType addACL, CmisAccessControlListType removeACL,
      List<String> policies) throws ConstraintException, UpdateConflictException, StreamNotSupportedException,
      IOException, StorageException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject checkout(String documentId) throws ConstraintException, UpdateConflictException,
      VersioningException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public void close()
   {
      session.logout();
   }

   @Override
   public CmisObject createDocument(String folderId, CmisPropertiesType properties, ContentStream content,
      CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl, List<String> policies,
      EnumVersioningState versioningState) throws ObjectNotFoundException, ConstraintException,
      InvalidArgumentException, StreamNotSupportedException, NameConstraintViolationException, IOException,
      StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject createDocumentFromSource(String sourceId, String folderId, CmisPropertiesType properties,
      CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl, List<String> policies,
      EnumVersioningState versioningState) throws ObjectNotFoundException, ConstraintException,
      InvalidArgumentException, NameConstraintViolationException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject createFolder(String folderId, CmisPropertiesType properties, CmisAccessControlListType addAcl,
      CmisAccessControlListType removeAcl, List<String> policies) throws ObjectNotFoundException, ConstraintException,
      InvalidArgumentException, NameConstraintViolationException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject createPolicy(String folderId, CmisPropertiesType properties, CmisAccessControlListType addAcl,
      CmisAccessControlListType removeAcl, List<String> policies) throws ObjectNotFoundException, ConstraintException,
      InvalidArgumentException, NameConstraintViolationException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject createRelationship(CmisPropertiesType properties, CmisAccessControlListType addAcl,
      CmisAccessControlListType removeAcl, List<String> policies) throws ObjectNotFoundException, ConstraintException,
      NameConstraintViolationException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public void deleteContentStream(String documentId, String changeToken) throws ObjectNotFoundException,
      ConstraintException, UpdateConflictException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void deleteObject(String objectId, boolean deleteAllVersions) throws ObjectNotFoundException,
      ConstraintException, UpdateConflictException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public List<String> deleteTree(String folderId, boolean deleteAllVersions, EnumUnfileObject unfileObject,
      boolean continueOnFailure) throws ObjectNotFoundException, UpdateConflictException, StorageException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisAccessControlListType getAcl(String objectId, boolean onlyBasicPermissions)
      throws ObjectNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisAllowableActionsType getAllowableActions(String objectId) throws ObjectNotFoundException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObject> getAllVersions(String versionSeriesId, boolean includeAllowableActions, String propertyFilter)
      throws ObjectNotFoundException, FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObject> getAppliedPolicies(String objectId, String propertyFilter) throws ObjectNotFoundException,
      FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectList getCheckedOutDocs(String folderId, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, String propertyFilter, String renditionFilter, String orderBy,
      int maxItems, int skipCount) throws ObjectNotFoundException, InvalidArgumentException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectInFolderList getChildren(String folderId, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePathSegments, String propertyFilter,
      String renditionFilter, String orderBy, int maxItems, int skipCount) throws ObjectNotFoundException,
      InvalidArgumentException, FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectList getContentChanges(String changeLogToken, boolean includeProperties, String propertyFilter,
      boolean includePolicyIDs, boolean includeAcl, int maxItems, int skipCount) throws ConstraintException,
      FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public ContentStream getContentStream(String objectId, String streamId, long offset, long length)
      throws ObjectNotFoundException, ConstraintException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObjectInFolderContainer> getDescendants(String folderId, int depth, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePathSegments, String propertyFilter,
      String renditionFilter) throws ObjectNotFoundException, InvalidArgumentException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject getFolderParent(String folderId, String propertyFilter) throws ObjectNotFoundException,
      InvalidArgumentException, FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObjectInFolderContainer> getFolderTree(String folderId, int depth, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePathSegments, String propertyFilter,
      String renditionFilter) throws ObjectNotFoundException, InvalidArgumentException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   public CmisObject getObject(String objectId, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePolicyIDs, boolean includeAcl,
      String propertyFilter, String renditionFilter) throws ObjectNotFoundException, FilterNotValidException,
      CmisRuntimeException
   {
      try
      {
         return getCmisObject(((ExtendedSession)session).getNodeByIdentifier(objectId)/*TODO:parameters*/);
      }
      catch (ItemNotFoundException nfe)
      {
         throw new ObjectNotFoundException("Object " + objectId + " does not exists.");
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   public CmisObject getObjectByPath(String path, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePolicyIDs, boolean includeAcl,
      String propertyFilter, String renditionFilter) throws ObjectNotFoundException, FilterNotValidException,
      CmisRuntimeException
   {
      try
      {
         Item item = session.getItem(path);
         if (!item.isNode())
            throw new ObjectNotFoundException("Object " + path + " does not exists.");
         return getCmisObject((Node)item/*TODO:parameters*/);
      }
      catch (ItemNotFoundException nfe)
      {
         throw new ObjectNotFoundException("Object " + path + " does not exists.");
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   @Override
   public CmisObject getObjectOfLatestVersion(String versionSeriesId, boolean major, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePolicyIDs, boolean includeAcl,
      String propertyFilter, String renditionFilter) throws ObjectNotFoundException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObjectParents> getObjectParents(String objectId, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includeRelativePathSegment, String propertyFilter,
      String renditionFilter) throws ObjectNotFoundException, ConstraintException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectList getObjectRelationships(String objectId, EnumRelationshipDirection direction, String typeId,
      boolean includeSubRelationshipTypes, boolean includeAllowableActions, String propertyFilter, int maxItems,
      int skipCount) throws FilterNotValidException, ObjectNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisPropertiesType getProperties(String objectId, String propertyFilter) throws ObjectNotFoundException,
      FilterNotValidException, CmisRuntimeException
   {
      ObjectData objectData = getObject(objectId);
      PropertyFilter filter = new PropertyFilter(propertyFilter);
      CmisPropertiesType properties = new CmisPropertiesType();
      List<CmisPropertyDefinitionType> propertyDefinitions =
         getTypeDefinition(objectData.getTypeId(), true).getPropertyDefinition();
      for (CmisPropertyDefinitionType propertyDefinition : propertyDefinitions)
      {
         if (filter.accept(propertyDefinition.getQueryName()))
            properties.getProperty().add(getProperty(objectData, propertyDefinition));
      }
      return properties;
   }

   @Override
   public CmisPropertiesType getPropertiesOfLatestVersion(String versionSeriesId, boolean major, String propertyFilter)
      throws FilterNotValidException, ObjectNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisRenditionType> getRenditions(String objectId, String renditionFilter, int maxItems, int skipCount)
      throws ObjectNotFoundException, FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisRepositoryInfoType getStorageInfo() throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisTypeDefinitionListType getTypeChildren(String typeId, boolean includePropertyDefinition, int maxItems,
      int skipCount) throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisTypeDefinitionType getTypeDefinition(String typeId) throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisTypeDefinitionType getTypeDefinition(String typeId, boolean includePropertyDefinition)
      throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisTypeContainer> getTypeDescendants(String typeId, int depth, boolean includePropertyDefinition)
      throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject moveObject(String objectId, String targetFolderId, String sourceFolderId)
      throws ObjectNotFoundException, ConstraintException, InvalidArgumentException, UpdateConflictException,
      StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectList query(String statement, boolean searchAllVersions, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, String renditionFilter, int maxItems, int skipCount)
      throws FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public void removeObjectFromFolder(String objectId, String folderId) throws ObjectNotFoundException,
      CmisRuntimeException
   {
      throw new NotSupportedException("Unfiling is not supported.");
   }

   @Override
   public void removePolicy(String policyId, String objectId) throws ConstraintException, ObjectNotFoundException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void removeType(String typeId) throws TypeNotFoundException, ConstraintException, StorageException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void setContentStream(String documentId, ContentStream content, String changeToken, boolean overwriteFlag)
      throws ObjectNotFoundException, ContentAlreadyExistsException, StreamNotSupportedException,
      UpdateConflictException, IOException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public CmisObject updateProperties(String objectId, String changeToken, CmisPropertiesType properties)
      throws ObjectNotFoundException, ConstraintException, NameConstraintViolationException, UpdateConflictException,
      StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   private ObjectData getObject(String objectId)
   {
      try
      {
         return new JcrObjectDataAdapter(((ExtendedSession)session).getNodeByIdentifier(objectId));
      }
      catch (ItemNotFoundException nfe)
      {
         throw new ObjectNotFoundException("Object " + objectId + " does not exists.");
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   private CmisProperty getProperty(ObjectData objectData, CmisPropertyDefinitionType propertyDefinition)
   {
      try
      {
         Property jcrProperty = ((JcrObjectDataAdapter)objectData).getNode().getProperty(propertyDefinition.getId());
         CmisProperty property = null;
         switch (propertyDefinition.getPropertyType())
         {
            case BOOLEAN :
               CmisPropertyBoolean bool = new CmisPropertyBoolean();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        bool.getValue().add(v.getBoolean());
                     break;
                  case SINGLE :
                     bool.getValue().add(jcrProperty.getBoolean());
                     break;
               }
               property = bool;
               break;
            case DATETIME :
               CmisPropertyDateTime date = new CmisPropertyDateTime();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        date.getValue().add(CmisUtils.fromCalendar(v.getDate()));
                     break;
                  case SINGLE :
                     date.getValue().add(CmisUtils.fromCalendar(jcrProperty.getDate()));
                     break;
               }
               property = date;
               break;
            case DECIMAL :
               CmisPropertyDecimal dec = new CmisPropertyDecimal();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        dec.getValue().add(BigDecimal.valueOf(v.getDouble()));
                     break;
                  case SINGLE :
                     dec.getValue().add(BigDecimal.valueOf(jcrProperty.getDouble()));
                     break;
               }
               property = dec;
               break;
            case HTML :
               CmisPropertyHtml html = new CmisPropertyHtml();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        html.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     html.getValue().add(jcrProperty.getString());
                     break;
               }
               property = html;
               break;
            case ID :
               CmisPropertyId id = new CmisPropertyId();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        id.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     id.getValue().add(jcrProperty.getString());
                     break;
               }
               property = id;
               break;
            case INTEGER :
               CmisPropertyInteger integer = new CmisPropertyInteger();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        integer.getValue().add(BigInteger.valueOf(v.getLong()));
                     break;
                  case SINGLE :
                     integer.getValue().add(BigInteger.valueOf(jcrProperty.getLong()));
                     break;
               }
               property = integer;
               break;
            case STRING :
               CmisPropertyString str = new CmisPropertyString();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        str.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     str.getValue().add(jcrProperty.getString());
                     break;
               }
               property = str;
               break;
            case URI :
               CmisPropertyUri uri = new CmisPropertyUri();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        uri.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     uri.getValue().add(jcrProperty.getString());
                     break;
               }
               property = uri;
               break;
         }
         property.setDisplayName(propertyDefinition.getDisplayName());
         property.setLocalName(propertyDefinition.getLocalName());
         property.setPropertyDefinitionId(propertyDefinition.getId());
         property.setQueryName(propertyDefinition.getQueryName());
         return property;
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   protected CmisObject getCmisObject(Node node)
   {
      // TODO Auto-generated method stub
      return null;

   }

   /**
    * Get CMIS object type id by the JCR node type name.
    * 
    * @param ntName the JCR node type name
    * @return CMIS object type id
    */
   protected String getCmisTypeId(String ntName)
   {
      if (ntName.equals(JcrCMIS.NT_FILE))
         return EnumBaseObjectTypeIds.CMIS_DOCUMENT.value();
      if (ntName.equals(JcrCMIS.NT_FOLDER) || ntName.equals(JcrCMIS.NT_UNSTRUCTURED))
         return EnumBaseObjectTypeIds.CMIS_FOLDER.value();
      return ntName;
   }

   /**
    * Get JCR node type name by the CMIS object type id.
    * 
    * @param typeId the CMIS base object type id
    * @return JCR string node type
    */
   protected String getNodeTypeName(String typeId)
   {
      if (typeId.equals(EnumBaseObjectTypeIds.CMIS_DOCUMENT.value()))
         return JcrCMIS.NT_FILE;
      if (typeId.equals(EnumBaseObjectTypeIds.CMIS_FOLDER.value()))
         return JcrCMIS.NT_FOLDER;
      return typeId;
   }

}

/*
 * Copyright (C) 2010 eXo Platform SAS.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package org.xcmis.sp.jcr.exo.NEW;

import org.exoplatform.services.jcr.core.ExtendedSession;
import org.xcmis.core.CmisAccessControlListType;
import org.xcmis.core.CmisAllowableActionsType;
import org.xcmis.core.CmisObjectType;
import org.xcmis.core.CmisPropertiesType;
import org.xcmis.core.CmisProperty;
import org.xcmis.core.CmisPropertyBoolean;
import org.xcmis.core.CmisPropertyDateTime;
import org.xcmis.core.CmisPropertyDecimal;
import org.xcmis.core.CmisPropertyDefinitionType;
import org.xcmis.core.CmisPropertyHtml;
import org.xcmis.core.CmisPropertyId;
import org.xcmis.core.CmisPropertyInteger;
import org.xcmis.core.CmisPropertyString;
import org.xcmis.core.CmisPropertyUri;
import org.xcmis.core.CmisRenditionType;
import org.xcmis.core.CmisRepositoryInfoType;
import org.xcmis.core.CmisTypeDefinitionType;
import org.xcmis.core.CmisTypeDocumentDefinitionType;
import org.xcmis.core.EnumACLPropagation;
import org.xcmis.core.EnumBaseObjectTypeIds;
import org.xcmis.core.EnumContentStreamAllowed;
import org.xcmis.core.EnumIncludeRelationships;
import org.xcmis.core.EnumRelationshipDirection;
import org.xcmis.core.EnumUnfileObject;
import org.xcmis.core.EnumVersioningState;
import org.xcmis.messaging.CmisObjectInFolderContainerType;
import org.xcmis.messaging.CmisObjectListType;
import org.xcmis.messaging.CmisTypeContainer;
import org.xcmis.sp.jcr.exo.object.EntryImpl;
import org.xcmis.spi.CMIS;
import org.xcmis.spi.CmisRuntimeException;
import org.xcmis.spi.ConstraintException;
import org.xcmis.spi.FilterNotValidException;
import org.xcmis.spi.InvalidArgumentException;
import org.xcmis.spi.NameConstraintViolationException;
import org.xcmis.spi.ObjectNotFoundException;
import org.xcmis.spi.PermissionDeniedException;
import org.xcmis.spi.StorageException;
import org.xcmis.spi.StreamNotSupportedException;
import org.xcmis.spi.TypeNotFoundException;
import org.xcmis.spi.UpdateConflictException;
import org.xcmis.spi.VersioningException;
import org.xcmis.spi.impl.BaseConnection;
import org.xcmis.spi.impl.ObjectData;
import org.xcmis.spi.impl.TypeData;
import org.xcmis.spi.impl.PropertyFilter;
import org.xcmis.spi.impl.RenditionFilter;
import org.xcmis.spi.object.CmisObject;
import org.xcmis.spi.object.ContentStream;
import org.xcmis.spi.object.ItemsIterator;
import org.xcmis.spi.utils.CmisUtils;

import java.io.IOException;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.jcr.AccessDeniedException;
import javax.jcr.Item;
import javax.jcr.ItemNotFoundException;
import javax.jcr.Node;
import javax.jcr.Property;
import javax.jcr.PropertyIterator;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.Value;

/**
 * @author <a href="mailto:andrey00x@gmail.com">Andrey Parfonov</a>
 * @version $Id: $
 */
public class ConnectionImpl extends BaseConnection
{

   private static Map<String, String> cmis2jcr = new HashMap<String, String>();

   static
   {
      cmis2jcr.put(CMIS.CREATION_DATE, "jcr:created");
      cmis2jcr.put(CMIS.CREATED_BY, "exo:owner");
      cmis2jcr.put(CMIS.CONTENT_STREAM_MIME_TYPE, "jcr:content/jcr:mimeType");
      cmis2jcr.put(CMIS.CONTENT_STREAM_ID, "jcr:content/jcr:uuid");
      //      cmis2jcr.put(CMIS.VERSION_SERIES_ID, "jcr:versionHistory");
   }

   protected final Session session;

   public ConnectionImpl(Session session)
   {
      this.session = session;
   }

   @Override
   protected void addObjectToFolder(ObjectData object, ObjectData folder, boolean allVersions)
      throws CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected void applyAcl(ObjectData object, CmisAccessControlListType addAcl,
      CmisAccessControlListType removeAcl, EnumACLPropagation propagation) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected void applyPolicy(ObjectData object, ObjectData policy) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected CmisObjectType createCmisObject(ObjectData object, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePolicyIds, boolean includeAcl,
      PropertyFilter parsedPropertyFilter, RenditionFilter parsedRenditionFilter)
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData createDocument(ObjectData folder, CmisTypeDefinitionType typeDefinition,
      CmisPropertiesType properties, ContentStream content, CmisAccessControlListType addAcl,
      CmisAccessControlListType removeACEs, List<String> policies, EnumVersioningState versioningState)
      throws StorageException, NameConstraintViolationException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData createDocumentFromSource(ObjectData source, ObjectData folder,
      CmisPropertiesType properties, CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl,
      List<String> policies, EnumVersioningState versioningState) throws StorageException,
      NameConstraintViolationException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData createFolder(ObjectData folder, CmisTypeDefinitionType typeDefinition,
      CmisPropertiesType properties, CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl,
      List<String> policies) throws StorageException, NameConstraintViolationException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData createPolicy(ObjectData folder, CmisTypeDefinitionType typeDefinition,
      CmisPropertiesType properties, CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl,
      List<String> policies) throws StorageException, NameConstraintViolationException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData createRelationship(CmisTypeDefinitionType typeDefinition,
      ObjectData source, ObjectData target, CmisPropertiesType properties,
      CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl, List<String> policies)
      throws StorageException, NameConstraintViolationException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected void deleteContentStream(ObjectData document) throws StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected void deleteObject(ObjectData object, boolean deleteAllVersion) throws UpdateConflictException,
      StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected void deleteTree(ObjectData folder, boolean deleteAllVersions, List<String> failedDelete,
      EnumUnfileObject unfileObject, boolean continueOnFailure) throws UpdateConflictException, StorageException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected CmisAccessControlListType getAcl(ObjectData object, boolean onlyBasicPermissions)
      throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected CmisAllowableActionsType getAllowableActions(ObjectData object) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected List<ObjectData> getAppliedPolicies(ObjectData object) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ItemsIterator<ObjectData> getChildren(ObjectData folder, String orderBy)
      throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ContentStream getContentStream(ObjectData object, String streamId, long offset, long length)
      throws ConstraintException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData getFolderParent(ObjectData folder) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ObjectData getObject(String objectId) throws ObjectNotFoundException, CmisRuntimeException
   {
      try
      {
         return new JcrObjectIndentifier(((ExtendedSession)session).getNodeByIdentifier(objectId));
      }
      catch (ItemNotFoundException nfe)
      {
         throw new ObjectNotFoundException("Object " + objectId + " does not exists.");
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   @Override
   protected ObjectData getObjectByPath(String path) throws ObjectNotFoundException, CmisRuntimeException
   {
      try
      {
         Item item = session.getItem(path);
         if (!item.isNode())
            throw new ObjectNotFoundException("Object " + path + " does not exists.");
         return new JcrObjectIndentifier((Node)item);
      }
      catch (ItemNotFoundException nfe)
      {
         throw new ObjectNotFoundException("Object " + path + " does not exists.");
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   @Override
   protected List<ObjectData> getObjectParents(ObjectData object) throws CmisRuntimeException
   {
      try
      {
         Node node = ((JcrObjectIndentifier)object).getNode();
         if (node.getDepth() == 0)
            return Collections.emptyList();
         Node parent = node.getParent();
         List<ObjectData> parents = new ArrayList<ObjectData>();
         parents.add(new JcrObjectIndentifier(parent));
         return parents;
      }
      catch (AccessDeniedException ade)
      {
         String msg = "Unable to get parent. Operation not permitted.";
         throw new PermissionDeniedException(msg, ade);
      }
      catch (javax.jcr.RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   @Override
   protected ItemsIterator<ObjectData> getObjectRelationships(ObjectData object,
      EnumRelationshipDirection direction, String typeId, boolean includeSubRelationshipTypes,
      boolean includeAllowableActions, PropertyFilter propertyFilter) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected CmisPropertiesType getProperties(ObjectData object, PropertyFilter propertyFilter)
      throws CmisRuntimeException
   {
      CmisPropertiesType properties = new CmisPropertiesType();
      List<CmisPropertyDefinitionType> propertyDefinitions =
         getTypeDefinition(object.getTypeId(), true).getPropertyDefinition();
      Node data = ((JcrObjectIndentifier)object).getNode();
      for (CmisPropertyDefinitionType propertyDefinition : propertyDefinitions)
      {
         if (propertyFilter.accept(propertyDefinition.getQueryName()))
            properties.getProperty().add(getProperty(data, propertyDefinition));
      }
      return properties;
   }

   //   private CmisPropertyDefinitionType getPropertyDefinition(List<CmisPropertyDefinitionType> all, String propertyId)
   //   {
   //      if (all != null)
   //      {
   //         for (CmisPropertyDefinitionType propDef : all)
   //         {
   //            if (propDef.getId().equals(propertyId))
   //               return propDef;
   //         }
   //      }
   //      return null;
   //   }

   private CmisProperty getProperty(Node data, CmisPropertyDefinitionType propertyDefinition)
   {
      try
      {
         Property jcrProperty = data.getProperty(propertyDefinition.getId());
         CmisProperty property = null;
         switch (propertyDefinition.getPropertyType())
         {
            case BOOLEAN :
               CmisPropertyBoolean bool = new CmisPropertyBoolean();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        bool.getValue().add(v.getBoolean());
                     break;
                  case SINGLE :
                     bool.getValue().add(jcrProperty.getBoolean());
                     break;
               }
               property = bool;
               break;
            case DATETIME :
               CmisPropertyDateTime date = new CmisPropertyDateTime();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        date.getValue().add(CmisUtils.fromCalendar(v.getDate()));
                     break;
                  case SINGLE :
                     date.getValue().add(CmisUtils.fromCalendar(jcrProperty.getDate()));
                     break;
               }
               property = date;
               break;
            case DECIMAL :
               CmisPropertyDecimal dec = new CmisPropertyDecimal();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        dec.getValue().add(BigDecimal.valueOf(v.getDouble()));
                     break;
                  case SINGLE :
                     dec.getValue().add(BigDecimal.valueOf(jcrProperty.getDouble()));
                     break;
               }
               property = dec;
               break;
            case HTML :
               CmisPropertyHtml html = new CmisPropertyHtml();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        html.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     html.getValue().add(jcrProperty.getString());
                     break;
               }
               property = html;
               break;
            case ID :
               CmisPropertyId id = new CmisPropertyId();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        id.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     id.getValue().add(jcrProperty.getString());
                     break;
               }
               property = id;
               break;
            case INTEGER :
               CmisPropertyInteger integer = new CmisPropertyInteger();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        integer.getValue().add(BigInteger.valueOf(v.getLong()));
                     break;
                  case SINGLE :
                     integer.getValue().add(BigInteger.valueOf(jcrProperty.getLong()));
                     break;
               }
               property = integer;
               break;
            case STRING :
               CmisPropertyString str = new CmisPropertyString();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        str.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     str.getValue().add(jcrProperty.getString());
                     break;
               }
               property = str;
               break;
            case URI :
               CmisPropertyUri uri = new CmisPropertyUri();
               switch (propertyDefinition.getCardinality())
               {
                  case MULTI :
                     for (Value v : jcrProperty.getValues())
                        uri.getValue().add(v.getString());
                     break;
                  case SINGLE :
                     uri.getValue().add(jcrProperty.getString());
                     break;
               }
               property = uri;
               break;
         }
         property.setDisplayName(propertyDefinition.getDisplayName());
         property.setLocalName(propertyDefinition.getLocalName());
         property.setPropertyDefinitionId(propertyDefinition.getId());
         property.setQueryName(propertyDefinition.getQueryName());
         return property;
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   @Override
   protected CmisProperty getProperty(ObjectData object, String propertyId) throws CmisRuntimeException
   {
      List<CmisPropertyDefinitionType> propertyDefinitions =
         getTypeDefinition(object.getTypeId(), true).getPropertyDefinition();
      Node data = ((JcrObjectIndentifier)object).getNode();
      CmisPropertyDefinitionType propertyDefinition = null;
      for (CmisPropertyDefinitionType pd : propertyDefinitions)
      {
         if (pd.getId().equals(propertyId))
         {
            propertyDefinition = pd;
            break;
         }
      }
      if (propertyDefinition == null)
         throw new InvalidArgumentException("Unknown property " + propertyId);
      return getProperty(data, propertyDefinition);
   }

   @Override
   protected TypeData getType(String typeId) throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected ItemsIterator<TypeData> getTypeChildren(TypeData type) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected List<ObjectData> getVersions(String versionSeriesId) throws ObjectNotFoundException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected boolean hasChildren(ObjectData object) throws CmisRuntimeException
   {
      if (object.getBaseType() != EnumBaseObjectTypeIds.CMIS_FOLDER)
         return false;
      try
      {
         Node data = ((JcrObjectIndentifier)object).getNode();
         return data.hasNodes();
      }
      catch (RepositoryException re)
      {
         throw new CmisRuntimeException(re.getMessage(), re);
      }
   }

   @Override
   protected boolean hasContent(ObjectData document) throws CmisRuntimeException
   {
      if (document.getBaseType() == EnumBaseObjectTypeIds.CMIS_DOCUMENT && ((CmisTypeDocumentDefinitionType)getType()).getContentStreamAllowed() != EnumContentStreamAllowed.NOTALLOWED)
         return false;
      // TODO Auto-generated method stub
      return false;
   }

   @Override
   protected CmisObjectType moveObject(ObjectData object, ObjectData target,
      ObjectData source) throws UpdateConflictException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected void removePolicy(ObjectData object, ObjectData policy) throws CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected void setContentStream(ObjectData document, ContentStream content) throws IOException,
      StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected CmisObjectType updateProperties(ObjectData object, CmisPropertiesType properties)
      throws ConstraintException, NameConstraintViolationException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   protected void validateChangeToken(String changeToken) throws UpdateConflictException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void addType(CmisTypeDefinitionType type) throws StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void cancelCheckout(String documentId) throws ConstraintException, UpdateConflictException,
      VersioningException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public CmisObjectType checkin(String documentId, boolean major, CmisPropertiesType properties,
      ContentStream content, String checkinComment, CmisAccessControlListType addACL,
      CmisAccessControlListType removeACL, List<String> policies) throws ConstraintException, UpdateConflictException,
      StreamNotSupportedException, IOException, StorageException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectType checkout(String documentId) throws ConstraintException, UpdateConflictException,
      VersioningException, StorageException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public void close()
   {
      if (session != null)
         session.logout();
   }

   @Override
   public CmisObjectListType getCheckedOutDocs(String folderId, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, String propertyFilter, String renditionFilter, String orderBy,
      int maxItems, int skipCount) throws ObjectNotFoundException, InvalidArgumentException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectListType getContentChanges(String changeLogToken, boolean includeProperties, String propertyFilter,
      boolean includePolicyIDs, boolean includeAcl, int maxItems, int skipCount) throws ConstraintException,
      FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObjectInFolderContainerType> getDescendants(String folderId, int depth,
      boolean includeAllowableActions, EnumIncludeRelationships includeRelationships, boolean includePathSegments,
      String propertyFilter, String renditionFilter) throws ObjectNotFoundException, InvalidArgumentException,
      FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisObjectInFolderContainerType> getFolderTree(String folderId, int depth,
      boolean includeAllowableActions, EnumIncludeRelationships includeRelationships, boolean includePathSegments,
      String propertyFilter, String renditionFilter) throws ObjectNotFoundException, InvalidArgumentException,
      FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisRenditionType> getRenditions(String objectId, String renditionFilter, int maxItems, int skipCount)
      throws ObjectNotFoundException, FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisRepositoryInfoType getStorageInfo() throws CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisTypeDefinitionType getTypeDefinition(String typeId, boolean includePropertyDefinition)
      throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public List<CmisTypeContainer> getTypeDescendants(String typeId, int depth, boolean includePropertyDefinition)
      throws TypeNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObjectListType query(String statement, boolean searchAllVersions, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, String renditionFilter, int maxItems, int skipCount)
      throws FilterNotValidException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public void removeObjectFromFolder(String objectId, String folderId) throws ObjectNotFoundException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   public void removeType(String typeId) throws TypeNotFoundException, ConstraintException, StorageException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub

   }

   @Override
   protected CmisObject getCmisObject(ObjectData object, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePolicyIds, boolean includeAcl,
      PropertyFilter parsedPropertyFilter, RenditionFilter parsedRenditionFilter)
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public void addObjectToFolder(String objectId, String folderId, boolean allVersions) throws ObjectNotFoundException,
      InvalidArgumentException, ConstraintException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      
   }

   @Override
   public void applyAcl(String objectId, CmisAccessControlListType addAcl, CmisAccessControlListType removeAcl,
      EnumACLPropagation propagation) throws ObjectNotFoundException, ConstraintException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      
   }

   @Override
   public List<String> deleteTree(String folderId, boolean deleteAllVersions, EnumUnfileObject unfileObject,
      boolean continueOnFailure) throws ObjectNotFoundException, UpdateConflictException, StorageException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisAccessControlListType getAcl(String objectId, boolean onlyBasicPermissions)
      throws ObjectNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisObject getObjectOfLatestVersion(String versionSeriesId, boolean major, boolean includeAllowableActions,
      EnumIncludeRelationships includeRelationships, boolean includePolicyIDs, boolean includeAcl,
      String propertyFilter, String renditionFilter) throws ObjectNotFoundException, FilterNotValidException,
      CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

   @Override
   public CmisPropertiesType getPropertiesOfLatestVersion(String versionSeriesId, boolean major, String propertyFilter)
      throws FilterNotValidException, ObjectNotFoundException, CmisRuntimeException
   {
      // TODO Auto-generated method stub
      return null;
   }

}

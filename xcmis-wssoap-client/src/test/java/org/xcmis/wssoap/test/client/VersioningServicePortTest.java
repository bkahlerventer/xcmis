package org.xcmis.wssoap.test.client;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import org.xcmis.soap.client.CmisException;
import org.xcmis.soap.client.VersioningService;
import org.xcmis.soap.client.VersioningServicePort;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;

/**
 * This class was generated by Apache CXF 2.1.4
 * Mon Apr 19 15:41:32 EEST 2010
 * Generated source version: 2.1.4
 * 
 */

public final class VersioningServicePortTest extends BaseTest
{

   private static final QName VERSIONING_SERVICE_NAME =
      new QName("http://docs.oasis-open.org/ns/cmis/ws/200908/", "VersioningService");

   VersioningServicePort versioning_port;

   public void setUp() throws Exception
   {
      URL wsdlURL = VersioningService.WSDL_LOCATION;
      VersioningService ss = new VersioningService(wsdlURL, VERSIONING_SERVICE_NAME);
      versioning_port = ss.getVersioningServicePort();
      ((BindingProvider)versioning_port).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, username);
      ((BindingProvider)versioning_port).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, password);
      super.setUp();
   }

   public void testCheckOut() throws Exception
   {
      System.out.println("Invoking checkOut...");
      java.lang.String _checkOut_objectIdVal =
         createDocument("testCheckOut_test771_" + System.nanoTime(), rootFolderId);
      javax.xml.ws.Holder<java.lang.String> _checkOut_objectId =
         new javax.xml.ws.Holder<java.lang.String>(_checkOut_objectIdVal);
      org.xcmis.soap.client.CmisExtensionType _checkOut_extensionVal = null;
      javax.xml.ws.Holder<org.xcmis.soap.client.CmisExtensionType> _checkOut_extension =
         new javax.xml.ws.Holder<org.xcmis.soap.client.CmisExtensionType>(_checkOut_extensionVal);
      javax.xml.ws.Holder<java.lang.Boolean> _checkOut_contentCopied = new javax.xml.ws.Holder<java.lang.Boolean>();
      try
      {
         versioning_port.checkOut(cmisRepositoryId, _checkOut_objectId, _checkOut_extension, _checkOut_contentCopied);

         System.out.println("checkOut._checkOut_objectId=" + _checkOut_objectId.value);
         System.out.println("checkOut._checkOut_extension=" + _checkOut_extension.value);
         System.out.println("checkOut._checkOut_contentCopied=" + _checkOut_contentCopied.value);
      }
      catch (CmisException e)
      {
         System.out.println("Expected exception: cmisException has occurred.");
         System.out.println(e.toString());
         fail(e.getMessage());
      }
      finally
      {
         deleteObject(_checkOut_objectIdVal);
      }
   }

   public void testCheckIn() throws Exception
   {
      System.out.println("Invoking checkIn...");
      java.lang.String _checkIn_objectIdVal = createDocument("testCheckIn_test771_" + System.nanoTime(), rootFolderId);
      javax.xml.ws.Holder<java.lang.String> _checkIn_objectId =
         new javax.xml.ws.Holder<java.lang.String>(_checkIn_objectIdVal);
      java.lang.Boolean _checkIn_major = null;
      org.xcmis.soap.client.CmisPropertiesType _checkIn_properties = null;
      org.xcmis.soap.client.CmisContentStreamType _checkIn_contentStream = null;
      java.lang.String _checkIn_checkinComment = "";
      java.util.List<java.lang.String> _checkIn_policies = null;
      org.xcmis.soap.client.CmisAccessControlListType _checkIn_addACEs = null;
      org.xcmis.soap.client.CmisAccessControlListType _checkIn_removeACEs = null;
      org.xcmis.soap.client.CmisExtensionType _checkIn_extensionVal = null;
      javax.xml.ws.Holder<org.xcmis.soap.client.CmisExtensionType> _checkIn_extension =
         new javax.xml.ws.Holder<org.xcmis.soap.client.CmisExtensionType>(_checkIn_extensionVal);
      try
      {
         versioning_port.checkIn(cmisRepositoryId, _checkIn_objectId, _checkIn_major, _checkIn_properties,
            _checkIn_contentStream, _checkIn_checkinComment, _checkIn_policies, _checkIn_addACEs, _checkIn_removeACEs,
            _checkIn_extension);

         System.out.println("checkIn._checkIn_objectId=" + _checkIn_objectId.value);
         System.out.println("checkIn._checkIn_extension=" + _checkIn_extension.value);
      }
      catch (CmisException e)
      {
         System.out.println("Expected exception: cmisException has occurred.");
         System.out.println(e.toString());
         fail(e.getMessage());
      }
      finally
      {
         deleteObject(_checkIn_objectIdVal);
      }
   }

   public void testGetAllVersions() throws Exception
   {
      System.out.println("Invoking getAllVersions...");
      java.lang.String _getAllVersions_objectId =
         createDocument("testGetAllVersions_test771_" + System.nanoTime(), rootFolderId);
      java.lang.String _getAllVersions_filter = "";
      java.lang.Boolean _getAllVersions_includeAllowableActions = null;
      org.xcmis.soap.client.CmisExtensionType _getAllVersions_extension = null;
      try
      {
         java.util.List<org.xcmis.soap.client.CmisObjectType> _getAllVersions__return =
            versioning_port.getAllVersions(cmisRepositoryId, _getAllVersions_objectId, _getAllVersions_filter,
               _getAllVersions_includeAllowableActions, _getAllVersions_extension);
         System.out.println("getAllVersions.result=" + _getAllVersions__return);

      }
      catch (CmisException e)
      {
         System.out.println("Expected exception: cmisException has occurred.");
         System.out.println(e.toString());
         fail(e.getMessage());
      }
      finally
      {
         deleteObject(_getAllVersions_objectId);
      }
   }

   public void testGetObjectOfLatestVersion() throws Exception
   {
      System.out.println("Invoking getObjectOfLatestVersion...");
      java.lang.String _getObjectOfLatestVersion_objectId =
         createDocument("testGetObjectOfLatestVersion_test771_" + System.nanoTime(), rootFolderId);
      java.lang.Boolean _getObjectOfLatestVersion_major = null;
      java.lang.String _getObjectOfLatestVersion_filter = "";
      java.lang.Boolean _getObjectOfLatestVersion_includeAllowableActions = null;
      org.xcmis.soap.client.EnumIncludeRelationships _getObjectOfLatestVersion_includeRelationships = null;
      java.lang.String _getObjectOfLatestVersion_renditionFilter = "";
      java.lang.Boolean _getObjectOfLatestVersion_includePolicyIds = null;
      java.lang.Boolean _getObjectOfLatestVersion_includeACL = null;
      org.xcmis.soap.client.CmisExtensionType _getObjectOfLatestVersion_extension = null;
      try
      {
         org.xcmis.soap.client.CmisObjectType _getObjectOfLatestVersion__return =
            versioning_port.getObjectOfLatestVersion(cmisRepositoryId, _getObjectOfLatestVersion_objectId,
               _getObjectOfLatestVersion_major, _getObjectOfLatestVersion_filter,
               _getObjectOfLatestVersion_includeAllowableActions, _getObjectOfLatestVersion_includeRelationships,
               _getObjectOfLatestVersion_renditionFilter, _getObjectOfLatestVersion_includePolicyIds,
               _getObjectOfLatestVersion_includeACL, _getObjectOfLatestVersion_extension);
         System.out.println("getObjectOfLatestVersion.result=" + _getObjectOfLatestVersion__return);

      }
      catch (CmisException e)
      {
         System.out.println("Expected exception: cmisException has occurred.");
         System.out.println(e.toString());
         fail(e.getMessage());
      }
      finally
      {
         deleteObject(_getObjectOfLatestVersion_objectId);
      }
   }

   public void testCancelCheckOut() throws Exception
   {
      System.out.println("Invoking cancelCheckOut...");
      java.lang.String _cancelCheckOut_objectId =
         createDocument("testCancelCheckOut_test771_" + System.nanoTime(), rootFolderId);
      org.xcmis.soap.client.CmisExtensionType _cancelCheckOut_extension = null;
      try
      {
         org.xcmis.soap.client.CmisExtensionType _cancelCheckOut__return =
            versioning_port.cancelCheckOut(cmisRepositoryId, _cancelCheckOut_objectId, _cancelCheckOut_extension);
         System.out.println("cancelCheckOut.result=" + _cancelCheckOut__return);

      }
      catch (CmisException e)
      {
         System.out.println("Expected exception: cmisException has occurred.");
         System.out.println(e.toString());
         fail(e.getMessage());
      }
      finally
      {
         deleteObject(_cancelCheckOut_objectId);
      }
   }

   public void testGetPropertiesOfLatestVersion() throws Exception
   {
      System.out.println("Invoking getPropertiesOfLatestVersion...");
      java.lang.String _getPropertiesOfLatestVersion_objectId =
         createDocument("testGetPropertiesOfLatestVersion_test771_" + System.nanoTime(), rootFolderId);
      java.lang.Boolean _getPropertiesOfLatestVersion_major = null;
      java.lang.String _getPropertiesOfLatestVersion_filter = "";
      org.xcmis.soap.client.CmisExtensionType _getPropertiesOfLatestVersion_extension = null;
      try
      {
         org.xcmis.soap.client.CmisPropertiesType _getPropertiesOfLatestVersion__return =
            versioning_port.getPropertiesOfLatestVersion(cmisRepositoryId, _getPropertiesOfLatestVersion_objectId,
               _getPropertiesOfLatestVersion_major, _getPropertiesOfLatestVersion_filter,
               _getPropertiesOfLatestVersion_extension);
         System.out.println("getPropertiesOfLatestVersion.result=" + _getPropertiesOfLatestVersion__return);

      }
      catch (CmisException e)
      {
         System.out.println("Expected exception: cmisException has occurred.");
         System.out.println(e.toString());
         fail(e.getMessage());
      }
      finally
      {
         deleteObject(_getPropertiesOfLatestVersion_objectId);
      }
   }

}
